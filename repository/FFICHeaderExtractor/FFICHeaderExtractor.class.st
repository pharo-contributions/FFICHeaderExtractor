Class {
	#name : #FFICHeaderExtractor,
	#superclass : #Object,
	#instVars : [
		'sharedPool',
		'platformName',
		'wordSize',
		'cFlags',
		'includeFiles',
		'headersToInclude',
		'compiler'
	],
	#category : 'FFICHeaderExtractor'
}

{ #category : #accessing }
FFICHeaderExtractor class >> autogeneratedMethodProtocol [
	^ 'autogenerated by FFICHeaderExtractor'

]

{ #category : #filenames }
FFICHeaderExtractor >> autogeneratedMethodName [
	"Answers the name/selector of the autogenerated init method. Examples of names are 'initVariablesMacOS32', 'initVariablesunix32', etc "
	^ ('initVariables', (self platformName copyWithout: Character space) , (self wordSize * 8) asString)
		
]

{ #category : #filenames }
FFICHeaderExtractor >> basicGeneralFilename [
	"For internal usage only. It answers the base filname from which we then base the C program filename, the binary, the log,  the output, etc"
	^ self sharedPool name , '.', self platformName 
]

{ #category : #filenames }
FFICHeaderExtractor >> binaryFilename [
	"Answers the filename for the compiled C program, that is, the binary file. This is typically the argument to the '-o' in gcc and cc."
	^ self basicGeneralFilename , '.o'
]

{ #category : #'method generation' }
FFICHeaderExtractor >> buildMethodSource [
	"This method creates the source of a Smalltalk method that would initialize the class vars of the shared pool with the values obtained from the output file of the C program"
	| sourceStream ouput | 
	sourceStream := String new writeStream.
	ouput := self outputFilename asFileReference readStream contents.
	"The output file of the C program is a literal array that looks like this:
	#(SIGKILL 9 4)
	#(UNDEFINED-SIGLOST 0 0)
	#(SIGPIPE 13 4)
	"
	sourceStream nextPutAll: self autogeneratedMethodName; cr.
	sourceStream nextPutAll: '"Method automatically generated by FFICHeaderExtractor. Read more at https://github.com/marianopeck/FFICHeaderExtractor"'; cr.
	sourceStream tab; nextPutAll: '<platformName: '''; nextPutAll: FFISharedPool currentPlatformName; nextPutAll: ''' wordSize: '; nextPutAll: FFISharedPool currentWordSize asString; nextPutAll:'>'; cr.
	ouput linesDo: [ :aLine | 
		| array |
		array := Compiler evaluate: aLine. 
		((array first beginsWith: 'UNDEFINED') and: [ array third = 0 ])
			ifTrue: [ 
				"Undefined constants will be written in the method like this: 
				WHATEVER := nil.""WHATEVER is UNDEFINED for this platform""
				"
				sourceStream tab.
				sourceStream nextPutAll: (array first allButFirst: 'UNDEFINED' size); nextPutAll: ' := nil.'.
				sourceStream nextPutAll: '"'.
				sourceStream nextPutAll: (array first allButFirst: 'UNDEFINED' size).
				sourceStream nextPutAll: ' is UNDEFINED for this platform'.
				sourceStream nextPutAll: '"'.
			]
			ifFalse: [  
				"Defined constants will be written like:
				SIGKILL := 9.
				"
				sourceStream tab; nextPutAll: array first; nextPutAll: ' := '; nextPutAll: array second asString; nextPutAll: '.' ].
		sourceStream cr.
	].
	^ sourceStream contents
]

{ #category : #accessing }
FFICHeaderExtractor >> cFlags [
	^ cFlags
]

{ #category : #accessing }
FFICHeaderExtractor >> cFlags: anObject [
	cFlags := anObject
]

{ #category : #filenames }
FFICHeaderExtractor >> cProgramFilename [
	"Answers the filename for the autogenerated C program."
	^ self basicGeneralFilename , '.c'
]

{ #category : #'running C program' }
FFICHeaderExtractor >> compileCProgram [
	"This method takes care of compiling the autogenerated C program. The following is an example of a compilation command for the shared pool FFITestingSharedPool for MacOSX 32 bits:
	
	cd /Users/mariano/pharo/imagenes; cc -m32 -o 'FFITestingSharedPool.Mac OS.o' 'FFITestingSharedPool.Mac OS.c' > 'FFITestingSharedPool.Mac OS.log' 2>&1 
	
	As you can see, STDOUT and STDERR are redirected to #logFilename for analysis in case of errors.
	"
	| compileScriptStream | 
	compileScriptStream := String new writeStream.
	compileScriptStream nextPutAll: 'cd ', FileSystem workingDirectory fullName, '; '.
	compileScriptStream nextPutAll: self compiler.
	compileScriptStream nextPutAll: ' '.
	compileScriptStream nextPutAll: self cFlags.
	compileScriptStream nextPutAll: ' -o '.
	compileScriptStream nextPutAll: '"', self binaryFilename, '"'.
	compileScriptStream nextPutAll: ' '.
	compileScriptStream nextPutAll: '"', self cProgramFilename, '"'.
	compileScriptStream nextPutAll: ' > '.
	compileScriptStream nextPutAll: '"', self logFilename, '"'.
	compileScriptStream nextPutAll: ' 2>&1 '.
	"Transcript show: 'Compile string: ', compileScriptStream contents; cr."
	self executeOSShellCommand: compileScriptStream contents.
	
]

{ #category : #accessing }
FFICHeaderExtractor >> compiler [
	^ compiler
]

{ #category : #accessing }
FFICHeaderExtractor >> compiler: anObject [
	compiler := anObject
]

{ #category : #'running C program' }
FFICHeaderExtractor >> executeOSShellCommand: aCommandString [
	"To perform the OS command, this method simply does a system() call via FFI. "
	self flag: #fixIt.
	"This won't work for Windows as it doesn't have system() function."
	self system: aCommandString
]

{ #category : #extracting }
FFICHeaderExtractor >> extractAndStoreHeadersInformation [
	"Main API method used by FFISharedPool. It first extracts all the constants values (defined in C header files) and then creates a smalltalk init method which is then compiled/installed in the shared pool"
	self extractHeadersInformation.	
	self storeFromExtracted.

]

{ #category : #extracting }
FFICHeaderExtractor >> extractHeadersInformation [
	"This method takes care of extracting all the constants values of a FFISharedPool from C header files. The way it does this is by first autogenerating a C program that will write down into an output text file, each constant and its value. Then such C program is compiled and run."
	| log |
	[
	self 
		generateCProgram;
		compileCProgram;
		runCProgram.
	] on: Error do: [ :ex | 
		self error: 'Error: ', ex printString. '. You may want to check ', self logFilename
	].
	log := self logFilename asFileReference readStream contents.
	log ifNotEmpty: [ 
		log inspect.
		self inform: 'There was a problem in the autogeneration. You may want to check ', self logFilename
		 ].
	
	

]

{ #category : #primitives }
FFICHeaderExtractor >> ffiLibraryName [ 
	^ LibC 
]

{ #category : #'generating C program' }
FFICHeaderExtractor >> generateCProgram [
	"This method is the one that finally autogenereates the C program"
	| stream | 
	stream := StandardFileStream forceNewFileNamed: self cProgramFilename "'/Users/mariano/prueba.c'".
	self writeCMainCommentOn: stream.
	self writeCIncludesOn: stream.
	self writeRestOfCFileOn: stream.
	stream flush; close.
]

{ #category : #accessing }
FFICHeaderExtractor >> headersToInclude [
	^ headersToInclude
]

{ #category : #accessing }
FFICHeaderExtractor >> headersToInclude: anObject [
	headersToInclude := anObject
]

{ #category : #accessing }
FFICHeaderExtractor >> includeFiles [
	^ includeFiles
]

{ #category : #accessing }
FFICHeaderExtractor >> includeFiles: anObject [
	includeFiles := anObject
]

{ #category : #filenames }
FFICHeaderExtractor >> logFilename [
	"Answers the log filename in which we redirect stdout and stderr in both, the compilation and execution of the C program"
	^  self basicGeneralFilename, '.log'
]

{ #category : #filenames }
FFICHeaderExtractor >> outputFilename [
	"Answers the filename for the output file (that contains all the names and values of the constants) that the C program will write when executed"
	^  self basicGeneralFilename, '.output'
]

{ #category : #primitives }
FFICHeaderExtractor >> perror: aMessage [
	"Prints the errno gloabl variable into the stderr together with aMessage string
	and then signal an error"
	self primitivePerror: aMessage.
	self error: 'Error: ', aMessage,' You may want to check errors in stderr'
]

{ #category : #accessing }
FFICHeaderExtractor >> platformName [
	^ platformName
]

{ #category : #accessing }
FFICHeaderExtractor >> platformName: anObject [
	platformName := anObject
]

{ #category : #primitives }
FFICHeaderExtractor >> primitivePerror: anErrorString [

	^ self ffiCall: #( void perror(String anErrorString) )

]

{ #category : #primitives }
FFICHeaderExtractor >> primitiveSystem: commandString [
	 ^ self ffiCall: #(int system(char* commandString) ) 
		
]

{ #category : #'running C program' }
FFICHeaderExtractor >> runCProgram [
	"This method takes care of executing the autogenerated and compiled C program. The following is an example of a execution command for the shared pool FFITestingSharedPool for MacOSX 32 bits:
	
	cd /Users/mariano/pharo/imagenes; ./'FFITestingSharedPool.Mac OS.o' >> 'FFITestingSharedPool.Mac OS.log' 2>&1 
	
	As you can see, STDOUT and STDERR are redirected to #logFilename for analysis in case of errors.
	"
	
	| runCStream | 
	runCStream := String new writeStream.
	runCStream nextPutAll: 'cd ', FileSystem workingDirectory fullName, '; '.
	runCStream nextPutAll: './', '"', self binaryFilename, '"'.
	runCStream nextPutAll: ' >> '.
	runCStream nextPutAll: '"', self logFilename, '"'.
	runCStream nextPutAll: ' 2>&1 '.
	"Transcript show: 'Execute C program string: ', runCStream contents; cr."
	self executeOSShellCommand: runCStream contents.
	
]

{ #category : #accessing }
FFICHeaderExtractor >> sharedPool [
	^ sharedPool
]

{ #category : #accessing }
FFICHeaderExtractor >> sharedPool: anObject [
	sharedPool := anObject
]

{ #category : #'method generation' }
FFICHeaderExtractor >> storeFromExtracted [
	"This method first takes the output file generated by the C program and creates a Smalltalk init method that would set the constants values extracted into the shared pool class variables. Then, the created method is stored in the shared pool class."
	| methodSource |
	methodSource := self buildMethodSource.
	self sharedPool class compile: methodSource classified: self class autogeneratedMethodProtocol
]

{ #category : #primitives }
FFICHeaderExtractor >> system: aCommandString [
	"Executes aCommandString in the OS via the system() call."
	| returnValue |
	returnValue := self primitiveSystem: aCommandString.
	(returnValue = -1) ifTrue: [ 
		self perror: 'system()'	
	].
	^ returnValue 
]

{ #category : #accessing }
FFICHeaderExtractor >> wordSize [
	^ wordSize
]

{ #category : #accessing }
FFICHeaderExtractor >> wordSize: anObject [
	wordSize := anObject
]

{ #category : #'generating C program' }
FFICHeaderExtractor >> writeCInclude: aHeaderName on: aStream [
	"Internal method for the C program creation. Giving aHeaderName like 'signal.h' this method writes the C #include definition."
	aStream 
		nextPutAll: '#include <';
		nextPutAll: aHeaderName;
		nextPutAll: '>';
		cr.	

]

{ #category : #'generating C program' }
FFICHeaderExtractor >> writeCIncludes: aListOfHeaderNames on: stream [
	"Internal method for the C program creation. It writes each of the user-defined header names (aListOfHeaderNames) as a C #include definition."
	aListOfHeaderNames do: [ :each | self writeCInclude: each on: stream ]

]

{ #category : #'generating C program' }
FFICHeaderExtractor >> writeCIncludesOn: stream [
	"Internal method for the C program creation. It writes C #include definitions for all the header names. It includes the mandatry ones for our C program (such as stdio.h and stdlib.h) and then all the user-defined ones which should define the constants defined as class variables in the shared pool."
	self writeCIncludes: #('stdio.h' 'stdlib.h') on: stream.
	self writeCIncludes: self headersToInclude on: stream.
	stream cr.
	
	

]

{ #category : #'generating C program' }
FFICHeaderExtractor >> writeCMainCommentOn: stream [
	"Internal method for the C program creation. This one just writes a general comment at the beginning."
	stream nextPutAll: ('//
//
//  Program automatically generated on <1s> by FFICHeaderExtractor.
// For more details, see https://github.com/marianopeck/FFICHeaderExtractor
//
//
'	expandMacrosWith: Date today yyyymmdd ).
	stream cr.
]

{ #category : #'generating C program' }
FFICHeaderExtractor >> writeListOfConstantsOn: aStream [
	"Internal method for the C program creation. This one iterates each class variable of the shared pool and calls the correct function to write the values into the output file."
	self sharedPool classVarNames withIndexDo: [ :each :index |
		aStream nextPutAll: (('
	#ifdef <1s>
		printDefinedConstant(file, <1s>);
	#else
		printUndefinedConstant(file, <1s>);
	#endif') expandMacrosWith: each); cr
	].
	
]

{ #category : #'generating C program' }
FFICHeaderExtractor >> writeRestOfCFileOn: stream [
	"Internal method for the C program creation. This one writes the end of the file, including the main(), the definition of our functions, and the opening of the FILE stream for the output. printDefinedConstant() and printUndefinedConstant() are called for each constant."
	stream cr.
	stream nextPutAll: '#define printDefinedConstant(file, const) fprintf(file, "#(%s %d %ld)\n", #const, const, sizeof(const))
	#define printUndefinedConstant(file, const) fprintf(file, "#(UNDEFINED%s %d %d)\n", #const, 0, 0)

	int main(int argc, const char * argv[]) {

	    FILE *file = fopen("', self outputFilename, '", "w");
	    if (file == NULL)
	    {
	        printf("Error opening file!\n");
	        exit(1);
	    }
	'.
	self writeListOfConstantsOn: stream. 

	stream nextPutAll: '
	    fclose(file);    
	    return 0;
	}
	'

]
