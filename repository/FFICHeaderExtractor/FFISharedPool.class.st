Class {
	#name : #FFISharedPool,
	#superclass : #SharedPool,
	#classInstVars : [
		'platformName',
		'wordSize'
	],
	#category : 'FFICHeaderExtractor'
}

{ #category : #'methods generation' }
FFISharedPool class >> allAutogeneratedMethodSelectors [
	"Answers the list of all the selectors of this class that are init methods autogenerated by FFICHeaderExtractor"
	^ self class allSelectorsInProtocol: FFICHeaderExtractor autogeneratedMethodProtocol.
]

{ #category : #accessing }
FFISharedPool class >> cHeaderExtractor [
	"This is a double dispatch with the OSPlatform class. Each platform should be respoonsible of sending the correct message to the shared pool (methods under protocol 'platforms') based on the current platform information (like wether it is 32 or 64 bits), such as unix32Extractor, macOSX32Extractor, etc.
	Answers an instance of a FFICHeaderExtractor specially created for current platform."
	^ Smalltalk os cHeaderExtractorFor: self
]

{ #category : #accessing }
FFISharedPool class >> currentPlatformName [
	"Answers the platform name of the current platform"
	^ Smalltalk os platformName
]

{ #category : #accessing }
FFISharedPool class >> currentWordSize [
	"Answers the word size of the current platform. This could be either 32 or 64. Right now the way we obtain this is via FFIExternalType"
	^ FFIExternalType sizeOf: #int
]

{ #category : #testing }
FFISharedPool class >> didPlatformChange [
	"Answers whether this shared pool was initialized for the same platform as the current one. In other words, it answers whether the platform has changed."
	^ ((self platformName = self currentPlatformName) and: [ self wordSize = self currentWordSize ]) not 
]

{ #category : #extracting }
FFISharedPool class >> extractAndStoreHeadersInformation [
	"Read the comment of FFICHeaderExtractor >> extractAndStoreHeadersInformation"
	self cHeaderExtractor extractAndStoreHeadersInformation.
]

{ #category : #testing }
FFISharedPool class >> hasAlreadyBeenInitializedBefore [
	"Answers whether this shared pool was already initialized before or not"
	^ self platformName notNil and: [ self wordSize notNil ]
 
]

{ #category : #accessing }
FFISharedPool class >> headersContainingVariables [
	"Answers an array with the `C` header names that define all the defined constants of this SharedPool. Subclasses can override and define their own C headers."
	^ self subclassResponsibility 
]

{ #category : #'initialize - release' }
FFISharedPool class >> initialize [
	self flag: #removeIt.
	"This IF will be eliminated soon...only here temporary"
	(SystemVersion current highestUpdate >= 50558)
		ifTrue: [ 
			SessionManager default registerToolClassNamed: self name
			 ]
		ifFalse: [ 
			Smalltalk addToStartUpList: self.
 		]
	
]

{ #category : #'variables initialization' }
FFISharedPool class >> initializeVariables [
	"This method does the lookup for an autogenerated init method for this platform. If found, then initialize from it. If not found, then do nothing."
	| selector |
	selector := self lookupInitMethodForCurrentPlatform.
	selector ifNotNil: [ 
		self initializeVariablesFrom: selector.
		self updatePlatformInfo.
	] 
]

{ #category : #'variables initialization' }
FFISharedPool class >> initializeVariablesFrom: aSelector [
	"Initializes the class variables of this shared pool with the autogenerated init method aSelector"
	aSelector ifNotNil: [ self perform: aSelector. ]
	
]

{ #category : #DEPRECATED }
FFISharedPool class >> initializeVariablesFromStonExtracted [
	| stonStream parsedDict |
	stonStream := (Smalltalk os cHeaderExtractorFor: self) outputFilename asFileReference readStream. 
	parsedDict := STON fromStream: stonStream.
	"The STON file looks like this:
	{
        'SIGHUP' : [
                1,
                4
        ],
        'SIGKILL' : [
                9,
                4
        ],
        'SIGTERM' : [
                15,
                4
        ]
}
	"
	parsedDict keysAndValuesDo: [ :key :value |
		self classVarNamed: key put: value first.	
 	]
]

{ #category : #'variables initialization' }
FFISharedPool class >> initializeVariablesIfNeeded [
	"If this shared pool shared pool should be initialized, then let's do it!"
	self shouldInitializeVariables ifTrue: [ 
		self initializeVariables.
	]
	
]

{ #category : #'methods generation' }
FFISharedPool class >> lookupInitMethodForCurrentPlatform [
	"This method searches an autogenerated init method for the current platform. The lookup basically means checking the selectors in a specific protocol and search for the one (if exists) with the pragma matching the #platformName and #wordSize of the current platform. If found, it answers the selector. If not found, it answers nil. "
	| selectors |
	selectors := self allAutogeneratedMethodSelectors. 
	^ selectors detect: [ :each | 
		| method arguments |
		method := self class compiledMethodAt: each. 
		arguments := (method pragmaAt: #platformName:wordSize:) arguments.
		(arguments first = self currentPlatformName) 
			and: [ (arguments second = self currentWordSize) ]
	] ifNone: [ 
		"IMPORTANT: Here we cannot throw an error becasue this method is called from the startup code (from startUp: -> initializeVariablesIfNeeded) and if we throw an error during statup, the image shutsdown and doesn't start anymore."
		Transcript show: 'There is no autogenerated init method for platform name ', self currentPlatformName, ' and word size ', self currentWordSize asString; cr.
		nil ]

]

{ #category : #platforms }
FFISharedPool class >> macOSX32Extractor [
	"This is the default setup of a FFICHeaderExtractor for OSX 32 bits. Shared pool subclasses may need to override this if they want to add or change the default settings. For example, setting #includeFiles: to custom directories."
	^ FFICHeaderExtractor new
		sharedPool: self;
		platformName: 'Mac OS'; "IMPORTANT: Should match with 'Smalltalk os platformName ' "
		wordSize: 4;
		cFlags: '-m32';
		headersToInclude: self headersContainingVariables;
		compiler: 'cc';
		yourself
]

{ #category : #accessing }
FFISharedPool class >> platformName [
	^ platformName
]

{ #category : #accessing }
FFISharedPool class >> platformName: aString [
	platformName := aString
]

{ #category : #'methods generation' }
FFISharedPool class >> removeAllGeneratedMethods [
	"This is a facility method, likely only used for tests. It simply removes all the autogenerated init methods from this shared pool"
	self allAutogeneratedMethodSelectors do: [ :each |
		self class removeSelector: each.	
	]
]

{ #category : #resetting }
FFISharedPool class >> reset [
	"Simply resets the none-constants class vars of this shared pool. Only used for testing right now."
	platformName := nil.
	wordSize := nil.
]

{ #category : #testing }
FFISharedPool class >> shouldInitializeVariables [
	"We should initialize variables if: 1) the platform has changed (for example, if this image was now started in a different OS) or if 2) the class variables where never initialized before."
	^ self hasAlreadyBeenInitializedBefore not or: [ self didPlatformChange ]
]

{ #category : #'system startup' }
FFISharedPool class >> startUp: resuming [
	"If 'resuming' is true, it means the image is being started. It's time then to iterate every subclass and initialize the class variables from the autogenerated init methods, for those subclasses that need such an initialization."
	resuming ifTrue: [ 
		self allSubclassesDo: [ :each | each initializeVariablesIfNeeded ]	
	]
]

{ #category : #platforms }
FFISharedPool class >> unix32Extractor [
	"This is the default setup of a FFICHeaderExtractor for Unix 32 bits. Shared pool subclasses may need to override this if they want to add or change the default settings. For example, setting #includeFiles: to custom directories."
	^ FFICHeaderExtractor new
		sharedPool: self;
		platformName: 'unix'; "Should match with 'Smalltalk os platformName ' "
		wordSize: 4;
		cFlags: '-m32';
		headersToInclude: self headersContainingVariables;
		compiler: 'gcc';
		yourself
]

{ #category : #'variables initialization' }
FFISharedPool class >> updatePlatformInfo [
	"Updates this shared pool with the info of the current platform."
	platformName := self currentPlatformName.
	wordSize := self currentWordSize.
]

{ #category : #accessing }
FFISharedPool class >> wordSize [
	^ wordSize
]

{ #category : #accessing }
FFISharedPool class >> wordSize: aNumber [
	wordSize := aNumber
]
